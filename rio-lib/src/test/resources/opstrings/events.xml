<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE opstring PUBLIC "-/RIO//DTD" "http://www.rio-project.org/dtd/rio_opstring.dtd">
<opstring>
    <OperationalString Name="Events Example">
        <Groups>
            <Group>rio</Group>
        </Groups>

        <!--
        The implementation jars are defined globally and referenced in each
        service bean declaration
        -->
        <Resources id="impl.jars">
            <JAR>events/lib/hello-event.jar</JAR>
        </Resources>

        <!--
        The Hello World event producer is the service bean that produces remote
        events. Note the inline configuration that declares the swing user
        interface that is accessible as meta-data for the service. Use the Rio UI
        to show the UI.
        -->
        <ServiceBean Name="Hello World">
            <Interfaces>
                <Interface>events.Hello</Interface>
                <Resources>
                    <JAR>events/lib/hello-event-dl.jar</JAR>
                </Resources>
            </Interfaces>

            <ImplementationClass Name="events.service.HelloImpl">
                <Resources ref="impl.jars"/>
            </ImplementationClass>                       
            
            <Configuration>
                import net.jini.core.entry.Entry;
                import org.rioproject.entry.UIDescriptorFactory;
                events.service {
                    serviceUIs =
                        new Entry[]{
                            UIDescriptorFactory.getJComponentDesc(
                                       (String)$data,
                                       "events/lib/hello-event-ui.jar",
                                       "events.service.ui.HelloEventUI")};
                }
            </Configuration>

            <Maintain>1</Maintain>

            <Comment>Hello World Event Producer Example</Comment>
        </ServiceBean>

        <!--
        The Hello Event Consumer is a simple bean that registers and is notified
        of HelloEvents. There is no need to declare interfaces for this class,
        default Rio service management will provide the remote access needed
        -->
        <ServiceBean Name="Hello Event Consumer">
            <ImplementationClass Name="events.service.HelloEventConsumer">
                <Resources ref="impl.jars"/>
            </ImplementationClass>

            <Maintain>1</Maintain>

            <Comment>Hello World Event Consumer Example</Comment>
        </ServiceBean>

    </OperationalString>
</opstring>
